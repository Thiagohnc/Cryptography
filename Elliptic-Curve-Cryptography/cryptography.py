from addition import *
from random import randint
from miller import Miller
from change import *

# A e B are constants of the Elliptic Curve and y^2 = x^3 + Ax + B

def primeGen(n1, n2):
    p = Miller(n1, n2)
    while(p % 4 != 3):
        p = Miller(n1, n2)
    return p

def pointGen(A, B, p):
    x = randint(2, p-1)
    y = pow(x**3 + A*x + B, (p+1)/4, p)
    return (x, y)

def keyGen(privKey, pointP, A, B, p):
    # privKey is an integer private key
    # pointP is a public point generated by pointGen
    
    return doubleAndAdd(pointP, privKey, A, B, p)

def encryption(message, pubKey, pointP, A, B, p):
    # pubKey is a point acquired by keyGen

    m = stringToInt(message)
    pointM = (m, pow(m**3 + A*m + B, (p+1)/4, p))

    k = randint(2, p-1)
    pointC1 = doubleAndAdd(pointP, k, A, B, p)
    pointC2 = addPoints(pointM, doubleAndAdd(pubKey, k, A, B, p), A, B, p)

    return (pointC1, pointC2)

def decryption(pointC1, pointC2, privKey, A, B, p):

    pointR = doubleAndAdd(pointC1, privKey, A, B, p)
    pointR = (pointR[0], -pointR[1])
    pointR = addPoints(pointC2, pointR, A, B, p)

    return intToString(pointR[0])
